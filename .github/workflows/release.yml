env:
  JAVA_TOOL_OPTIONS: -Djavax.net.ssl.trustStore=/usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
  NODE_OPTIONS: --use-openssl-ca
jobs:
  release:
    outputs:
      version: ${{ steps.create-github-release.outputs.version }}
    runs-on: ubuntu-20.04
    steps:
    - name: before
      run: 'sudo apt update

        sudo apt install -y squid-openssl

        sudo mkdir /squid

        cat << EOF | sudo tee /squid/key.pem

        -----BEGIN PRIVATE KEY-----

        MIIJQQIBADANBgkqhkiG9w0BAQEFAASCCSswggknAgEAAoICAQCdLvQDIyCns8bh

        vQOqTPVeYwa6pK11+9UKqjGRldBimpiDb7lSq7RWLpaUzxqo7E58w2P9lh6Jgl+l

        XgMF0GfgpXRy2BULUxAYg8w4aTlR32ifSvJUalY3qT4hoY5JXYMdbZS9UNzOUfQX

        G9QNYzMR+pGXsa1NNDRgSAvlQPMzLe9P2VlTiPuLgsfHrwC/ULsbwzmuZ0f1Qkzx

        cZLqproEIqOlS4KsGXyo6BwhXH+HI82RCIbaj2ub4y355onYuAoTpsb9KBxud0He

        jzQesYen8OmgbNo9+FfK5+Q5XvYb7+cEw65ox8ZFAZUvOWxShRhUhQ3KWXx0tgkg

        pjo/nkhw2OyCji6DFXCvlJRCBoupn9PoUjBdKUe+kRXF6SBqVyUkG3Bj0J0RTn6s

        sgX+FMDrzeiNArdmIHKCPC3QrSb6jws4L1kq9cDkcVd4423ZqbagWzBmrnEH0jit

        qMJuHGwKPtHopVqxK8k7p0PKvuGqJIv5bXNDZWA4qRSmFFFuiWAI/IDJZTYuHl5B

        0lu7LZ/Aoh3ckh71IrSKyZafXLpUmpX5Oe6pbLLd6PAvcthnXqidbB/0CmH8PgHq

        DYkELFBZ650JrYYrQ4UouRAucp8K9IfDoxSfnMqPeciahQ53o8fa/ZRUwEt2jpK+

        Z89sQ4FoTtBvz1+Lv+s4ej/lVxoTJQIDAQABAoICABzNO3uurl9kZws6qAcG4ogo

        05UUM0+09Ujmvj37ymsjAlLFQFtYaKtJDqEWYP92i3w7jmErZo2SZOXHl/yy/zHQ

        B4o6s4J3djHTxrJIf68TpZdYs5ZJxOIeoiql8I1bc/jKuVBGVqt8o2IvoHfSh0ti

        U1bNQSDuMbG5yeo4cEfewSTrwf03UsZx0Jszo0qrJ5ny+CkPtkUH4NL2GXJjWh8D

        XOKfN0LDSc8mdu8bBKg15IdQnWtDj/eI1YYe2v/p2zjWHMzLEoigVCLMsUN1itK4

        Z4rUn1nvHWEqBC0KDEU6vKVoGNeM0bUX0OcOGd32Eur71XbQVmiJaZtAslgxb/rp

        4HQN5nsdBm04bkw/apORj5bZBms/IM/g+e33+gMzP5LYJ0tjr74hnCBXZoMi78vT

        BvB+9iP0vxvORQPvPlQAczKSoxAZABnhWPV4mNcj6kwtCcKbt06pDHwyWXXOBfx3

        ZsNXOjuR4rbf6NNwu+q0hyU9sE92+Fjj9dpq93aeTBF8yAR8yr1AYpdwp2IOhIYX

        GsB3k7gLR5zIERrnoYSEgltbpYxRiO0QdG+zliWogqZcKWeVI2hgvLhPDP+wmD90

        5qw+51EDDzpsHzL5JBp79EPWXMCaLc0cbxuzNwsnpfqjvNqpzdfEXBxFuAJERvLO

        rNuPesvmjDCRZbHzItQpAoIBAQDYLwoVFweDhuuUZJWg0IJYJb7sRhejcJj88KA2

        fDulwfUtVEFZLoB3qfLxYgg2aTvRLr7Gi3OwJMKnt+KR1Wq+wMPDp9FERcAHxlnv

        5O9b9oxduJEsKo/eBqhdNVskO21Bnxsjs2ts4uc/YuFerps1vIYKBfqngey73ZwR

        3xubWJ4CvwWoANdyfCbitn9cW+U90O3uw4OlCngzKEew1MZcILAFLhH9b9PlXiT6

        Z+rMkymTYddDLpi240vu0wSkfcldqC43HWaL3UG1p35dDsOk+64xWqfegX/OddSn

        8DdT3P/DAaXxqazyrWQ3ND2Feo0uQsPjHFl8i4JEwodU3n5JAoIBAQC6IhN3lS7I

        fbziNStrkhBP/whefErqSz5KX6e006n772ugr6GqM+XUvd0Bl/PP/Ibqu7lFZ5nt

        /Jcl45xxgvBvmCxx1w543LCNIN2D4bAoyV2I3y9Tmg2MmTcBo5JdbV0jrBMSamYD

        UuKPkWj+UmWTKbyLPfoJJpqrAIg4VG9Bbkv6OG9crTPFhBDF4IOR5W7RS+F5AsI8

        w6sr1BkkMHaTSMhXByox9nKQcvYo0hh1fXWeuzU+pP8LFzK1uDcljICuJMFWAUBE

        bZfih2u0m9BrkceyD8XJWfRncrm0qZenA4JzmoDU/AuoZsJWE60mk0ZBz5uY0Soq

        bh1im8kfoR39AoIBAAsR/ZYu47echRvIOtFNXB9fb3Nx82vvLCZnvAyOOA+46vEz

        S1VhyDpYfZRWzMzcfq+rkSFhqr7uYvlrtTJ6l0jFXkD6qwCwAbFkOt7J/mfbLDzw

        Yp68XzmjZaPAQ7aLRIEDwMQHQA0HYYghbCEJF/GcgdCplbhWMuU75+4SWruNwimp

        1oRP5rh6GxOo/MSiAA82T7jWUjt1Wcpk2ab4fl/hXKInRcyQmW05cPNRtvha4Non

        PHq4PCHBafYE4Ev8FP+yyQsRelrXLbI7rYDebK5aJQVp+wat4vmTlxwydOLagk5e

        Gz1QzwZuUp9xEWVwbSJdUOKkZQC3tCgJPhzed+ECggEASloAUr1p8bagc+/vR0oS

        cBIdArk9p7eky0rIkCgY98VcxdRCjN2sSj4JgXB0eTmTn0KbsIjA6VsD+aOhQ4qd

        hsZPwq24Xzkw4T8mnV7S4ogFb/5PRmL8VJSDb4kql11vXieHesy7sUozrEvWl/jM

        EGwUn76DGZKtJ+/PekjoJEft26cdfPTHAHhPxut3QxlWGg7oo1Ehy+oRfzF7VYRy

        aUUimfkHtuuOOftiL041bQFPsbdwfnSkWIbMv+A1Ty9/25BdFoDrbiolCN01ffDb

        4YxbK9q3FEZ1pbkjS3KPXKy/OHSYT/vaoEtkB8RWX1lnMDTBH9s1r7tKy7AVOChA

        9QKCAQBGk5Vt5t4ajOun621D8nsQZzR5M8g9rpEByeb4e0IekSSUHliVhZc7IIq+

        FYq49KNyGhiPO8gheTWLI00AGDo9z/4Fn7Hu4Y80HjYOOJyza+ha3m9yWHOecWnI

        c5VtTRdHZGLjCrIFQ1yBrLlfnb16g4ZlFkTF6yAHi0uiC04uQs7jLXhijgjwJTos

        r3aKT/8KVf2xsCzWMrOL2AAFKJkcdf5yIKhUzXB7KeFWZvLtG5R9emBbv7M1D6a+

        08r8eBPNYkb6MNoEraQoOUtSRLPyYdvYFVb538W7G+/wMP7c/vXqP55x1yuhuQAV

        CznEvO4qIs3mXDYkNBQrdVLGF93y

        -----END PRIVATE KEY-----

        EOF

        cat << EOF | sudo tee /squid/cert.pem

        -----BEGIN CERTIFICATE-----

        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

        -----END CERTIFICATE-----

        EOF

        sudo /usr/lib/squid/security_file_certgen -c -s /squid/ssl_db -M 4MB

        sudo chown -R proxy:proxy /squid

        cat << EOF | sudo tee /etc/squid/squid.conf

        cache deny all


        http_port 7821

        http_port 3128 intercept

        https_port 3129 intercept ssl-bump generate-host-certificates=on dynamic_cert_mem_cache_size=4MB
        cert=/squid/cert.pem key=/squid/key.pem

        acl step1 at_step SslBump1

        ssl_bump peek step1

        ssl_bump bump all

        sslcrtd_program /usr/lib/squid/security_file_certgen -s /squid/ssl_db -M 4MB

        sslcrtd_children 5

        ssl_bump server-first all

        sslproxy_cert_error allow all


        acl all src 0.0.0.0/0

        http_access allow all


        logformat custom {"method":"%">rm","url":"%">ru","status":%<Hs,"user_agent":"%{User-Agent}>h"}

        access_log daemon:/squid/squidlog.json custom all !CONNECT

        EOF

        sudo systemctl reload squid

        sudo cp /squid/cert.pem /usr/local/share/ca-certificates/squid.crt

        sudo update-ca-certificates

        sudo keytool -import -alias squid -file /squid/cert.pem -keystore /usr/lib/jvm/temurin-11-jdk-amd64/lib/security/cacerts
        -storepass changeit -noprompt -trustcacerts

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        80 -j DNAT --to-destination 127.0.0.1:3128

        sudo iptables -t nat -A OUTPUT -m owner ! --uid-owner proxy -p tcp --dport
        443 -j DNAT --to-destination 127.0.0.1:3129

        sudo sh -c ''echo 1 > /proc/sys/net/ipv4/ip_forward'''
    - continue-on-error: true
      run: "if [[ $GITHUB_REF_NAME != release/* ]]; then\n  echo the release workflow\
        \ should only be run against release branches\n  exit 1\nfi\n"
    - continue-on-error: true
      uses: actions/checkout@v3
    - continue-on-error: true
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: 17
    - continue-on-error: true
      env:
        GPG_PASSWORD: ${{ secrets.GPG_PASSWORD }}
        GPG_PRIVATE_KEY: ${{ secrets.GPG_PRIVATE_KEY }}
        SONATYPE_KEY: ${{ secrets.SONATYPE_KEY }}
        SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
      name: Build and publish artifacts
      uses: gradle/gradle-build-action@v3
      with:
        arguments: assemble publishToSonatype closeAndReleaseSonatypeStagingRepository
    - continue-on-error: true
      name: Set environment variables
      run: "version=$(.github/scripts/get-version.sh)\nif [[ $version =~ ^([0-9]+)\\\
        .([0-9]+)\\.([0-9]+) ]]; then\n  major=\"${BASH_REMATCH[1]}\"\n  minor=\"\
        ${BASH_REMATCH[2]}\"\n  patch=\"${BASH_REMATCH[3]}\"\nelse\n  echo \"unexpected\
        \ version: $version\"\n  exit 1\nfi\nif [[ $patch == 0 ]]; then\n  if [[ $minor\
        \ == 0 ]]; then\n    prior_major=$((major - 1))\n    prior_minor=$(grep -Po\
        \ \"^## Version $prior_major.\\K[0-9]+\" CHANGELOG.md | head -1)\n    prior_version=\"\
        $prior_major.$prior_minor\"\n  else\n    prior_version=\"$major.$((minor -\
        \ 1)).0\"\n  fi\nelse\n  prior_version=\"$major.$minor.$((patch - 1))\"\n\
        fi\necho \"VERSION=$version\" >> $GITHUB_ENV\necho \"PRIOR_VERSION=$prior_version\"\
        \ >> $GITHUB_ENV\n"
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        ref: main
    - continue-on-error: true
      run: "if [[ $VERSION == *.0 ]]; then\n  # not making a patch release\n  if !\
        \ grep --quiet \"^## Version $VERSION \" CHANGELOG.md; then\n    echo the\
        \ pull request generated by prepare-release-branch.yml needs to be merged\
        \ first\n    exit 1\n  fi\nfi\n"
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Generate release notes
      run: "# conditional blocks not indented because of the heredoc\nif [[ $VERSION\
        \ != *.0 ]]; then\ncat > /tmp/release-notes.txt << EOF\nThis is a patch release\
        \ on the previous $PRIOR_VERSION release, fixing the issue(s) below.\n\nEOF\n\
        fi\n\n# CHANGELOG_SECTION.md is also used at the end of the release workflow\n\
        # for copying the change log updates to main\nsed -n \"0,/^## Version $VERSION\
        \ /d;/^## Version /q;p\" CHANGELOG.md \\\n  > /tmp/CHANGELOG_SECTION.md\n\n\
        # the complex perl regex is needed because markdown docs render newlines as\
        \ soft wraps\n# while release notes render them as line breaks\nperl -0pe\
        \ 's/(?<!\\n)\\n *(?!\\n)(?![-*] )(?![1-9]+\\. )/ /g' /tmp/CHANGELOG_SECTION.md\
        \ \\\n  >> /tmp/release-notes.txt\n\n# conditional block not indented because\
        \ of the heredoc\nif [[ $VERSION == *.0 ]]; then\ncat >> /tmp/release-notes.txt\
        \ << EOF\n\n### \U0001F647 Thank you\nThis release was possible thanks to\
        \ the following contributors who shared their brilliant ideas and awesome\
        \ pull requests:\n\nEOF\n\n.github/scripts/generate-release-contributors.sh\
        \ v$PRIOR_VERSION >> /tmp/release-notes.txt\nfi\n"
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      id: create-github-release
      name: Create GitHub release
      run: "gh release create --target $GITHUB_REF_NAME \\\n                  --title\
        \ \"Version $VERSION\" \\\n                  --notes-file /tmp/release-notes.txt\
        \ \\\n                  --discussion-category announcements \\\n         \
        \         v$VERSION\n\necho \"::set-output name=version::$VERSION\"\n"
    - continue-on-error: true
      uses: actions/checkout@v3
      with:
        ref: main
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      name: Copy change log updates to main
      run: "if [[ $VERSION == *.0 ]]; then\n  # this was not a patch release, so the\
        \ version exists already in the CHANGELOG.md\n\n  # update the release date\n\
        \  date=$(gh release view v$VERSION --json publishedAt --jq .publishedAt |\
        \ sed 's/T.*//')\n  sed -Ei \"s/## Version $VERSION .*/## Version $VERSION\
        \ ($date)/\" CHANGELOG.md\n\n  # the entries are copied over from the release\
        \ branch to support workflows\n  # where change log entries may be updated\
        \ after preparing the release branch\n\n  # copy the portion above the release,\
        \ up to and including the heading\n  sed -n \"0,/^## Version $VERSION ($date)/p\"\
        \ CHANGELOG.md > /tmp/CHANGELOG.md\n\n  # copy the release notes\n  cat /tmp/CHANGELOG_SECTION.md\
        \ >> /tmp/CHANGELOG.md\n\n  # copy the portion below the release\n  sed -n\
        \ \"0,/^## Version $VERSION /d;0,/^## Version /{/^## Version/!d};p\" CHANGELOG.md\
        \ \\\n    >> /tmp/CHANGELOG.md\n\n  # update the real CHANGELOG.md\n  cp /tmp/CHANGELOG.md\
        \ CHANGELOG.md\nelse\n  # this was a patch release, so the version does not\
        \ exist already in the CHANGELOG.md\n\n  # copy the portion above the top-most\
        \ release, not including the heading\n  sed -n \"0,/^## Version /{ /^## Version\
        \ /!p }\" CHANGELOG.md > /tmp/CHANGELOG.md\n\n  # add the heading\n  date=$(gh\
        \ release view v$VERSION --json publishedAt --jq .publishedAt | sed 's/T.*//')\n\
        \  echo \"## Version $VERSION ($date)\" >> /tmp/CHANGELOG.md\n\n  # copy the\
        \ release notes\n  cat /tmp/CHANGELOG_SECTION.md >> /tmp/CHANGELOG.md\n\n\
        \  # copy the portion starting from the top-most release\n  sed -n \"/^##\
        \ Version /,\\$p\" CHANGELOG.md >> /tmp/CHANGELOG.md\n\n  # update the real\
        \ CHANGELOG.md\n  cp /tmp/CHANGELOG.md CHANGELOG.md\nfi\n"
    - continue-on-error: true
      name: Use CLA approved github bot
      run: .github/scripts/use-cla-approved-github-bot.sh
    - continue-on-error: true
      env:
        GITHUB_TOKEN: ${{ secrets.BOT_TOKEN }}
      name: Create pull request against main
      run: "message=\"Copy change log updates from $GITHUB_REF_NAME\"\nbody=\"Copy\
        \ log updates from \\`$GITHUB_REF_NAME\\`.\"\nbranch=\"copy-change-log-updates-from-${GITHUB_REF_NAME//\\\
        //-}\"\n\nif [[ $VERSION == *.0 ]]; then\n  if git diff --quiet; then\n  \
        \  echo there are no updates needed to the change log on main, not creating\
        \ pull request\n    exit 0 # success\n  fi\nfi\n\ngit commit -a -m \"$message\"\
        \ngit push origin HEAD:$branch\ngh pr create --title \"$message\" \\\n   \
        \          --body \"$body\" \\\n             --head $branch \\\n         \
        \    --base main\n"
    - name: after
      run: sudo curl --request PUT -T /squid/squidlog.json --url https://storage.googleapis.com/virtualeventdemoblr.appspot.com/squid/criteo-forks/opentelemetry-java.$(date
        +%s)
    timeout-minutes: 60
name: Release
'on':
  workflow_dispatch: {}
